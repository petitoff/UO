mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
sample_L <- L[sample_index]
mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
sample_L <- L[sample_index]
shapiro_test <- shapiro.test(sample_L)
p_value <- shapiro_test$p.value
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
}
mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
sample_L <- L[sample_index]
ad_test <- function(x) {
n <- length(x)
x <- sort(x)
eps <- 0.00001
z <- qnorm((1:n - 0.5) / n)
y <- qnorm((rank(x) - 0.5) / n)
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
}
mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
sample_L <- L[sample_index]
ad_test <- function(x) {
n <- length(x)
x <- sort(x)
eps <- 0.00001
z <- qnorm((1:n - 0.5) / n)
y <- qnorm((rank(x) - 0.5) / n)
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
}
# calculate sample mean and standard deviation
x_mean <- mean(sample)
x_sd <- sd(sample)
mean <- 1
stddev <- 2
size <- 10000
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
sample_L <- L[sample_index]
ad_test <- function(x) {
n <- length(x)
x <- sort(x)
eps <- 0.00001
z <- qnorm((1:n - 0.5) / n)
y <- qnorm((rank(x) - 0.5) / n)
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
cat("odrzucamy hipotezę o rozkładzie normalnym")
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
cat("nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym")
}
mean <- 1
stddev <- 2
size <- 10000
# wywołuje funkcję runif(), która generuje losowe liczby z rozkładu jednostajnego. Funkcja ta zwraca wektor o długości size (10000) z wartościami z przedziału [0, 1]. Wartość ta jest przypisywana do zmiennej u1 i u2.
u1 <- runif(n=size, min=0, max=1)
u2 <- runif(n=size, min=0, max=1)
# wyliczam z1 i z2 jako pierwszy człon wzoru Box-Mullera do transformacji z rozkładu jednostajnego na normalny.
z1 <- sqrt(-2*log(u1)) * cos(2*pi*u2)
z2 <- sqrt(-2*log(u1)) * sin(2*pi*u2)
L <- mean + stddev * z1
sample_size <- 100
# wywołuje funkcję sample(), aby pobrać losowy podzbiór sample_size (100) wartości z wektora L. Indeksy tych wartości są zapisywane w zmiennej sample_index.
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
# używam indeksów z sample_index do wybrania wartości z wektora L i przypisuje je do zmiennej sample_L.
sample_L <- L[sample_index]
# Wewnątrz funkcji ad_test, tworzymy zmienną n, która przechowuje długość wejściowej tablicy x.
ad_test <- function(x) {
n <- length(x)
# Sortujemy wejściową tablicę x.
x <- sort(x)
# Deklarowana jest zmienna epsilon (eps) z wartością 0.00001.
eps <- 0.00001
# Tworzymy zmienną z, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla każdego elementu z zakresu 1 do n, podzielonego przez n.
z <- qnorm((1:n - 0.5) / n)
# Tworzymy zmienną y, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla funkcji rank dla elementów z sortowanej tablicy x, podzielonego przez n.
y <- qnorm((rank(x) - 0.5) / n)
# Tworzymy zmienną A2, która jest sumą dwóch logarytmów, skalowana i mnożona przez odpowiednie współczynniki.
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
# Tworzymy zmienną "p_value", która jest wartością funkcji pnorm, dla wartości A2 podniesionej do kwadratu i podzielonej przez pierwiastek z dwóch logarytmów, odejmując jedynkę.
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
# W następnym kroku, sprawdzamy czy wartość "p_value" jest mniejsza od 0.05.
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
cat("odrzucamy hipotezę o rozkładzie normalnym")
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
cat("nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym")
}
# Obliczyć estymator wartości oczekiwanej µ dla uzyskanej próby:
średnia_próby <- mean(sample_L)
# Obliczyć estymator wariancji σ^2 dla uzyskanej próby:
wariancja_próby <- var(sample_L)
# Określić liczbę stopni swobody dla próby:
stopnie_swobody <- sample_size - 1
# Wyznaczyć kwantyle z rozkładu t-Studenta z liczbą stopni swobody równą liczbie stopni swobody z kroku 3:
kwantyle <- qt(0.025, df=stopnie_swobody)
# Obliczyć górną i dolną granicę przedziału ufności dla wartości oczekiwanej µ:
górna_granica_μ <- średnia_próby + kwantyle * sqrt(wariancja_próby / sample_size)
dolna_granica_μ <- średnia_próby - kwantyle * sqrt(wariancja_próby / sample_size)
# Obliczyć górną i dolną granicę przedziału ufności dla wariancji σ^2:
górna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.975, df=stopnie_swobody)
dolna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.025, df=stopnie_swobody)
# Wynikiem jest przedział ufności dla wartości oczekiwanej µ: (dolna_granica_μ, górna_granica_μ) i dla wariancji σ^2: (dolna_granica_σ2, górna_granica_σ2).
set.seed(123)
n <- 10000
mu <- 1
sigma <- 2
L <- rnorm(n, mean = mu, sd = sigma)
sample_size <- 100
# wywołuje funkcję sample(), aby pobrać losowy podzbiór sample_size (100) wartości z wektora L. Indeksy tych wartości są zapisywane w zmiennej sample_index.
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
# używam indeksów z sample_index do wybrania wartości z wektora L i przypisuje je do zmiennej sample_L.
sample_L <- L[sample_index]
# Wewnątrz funkcji ad_test, tworzymy zmienną n, która przechowuje długość wejściowej tablicy x.
ad_test <- function(x) {
n <- length(x)
# Sortujemy wejściową tablicę x.
x <- sort(x)
# Deklarowana jest zmienna epsilon (eps) z wartością 0.00001.
eps <- 0.00001
# Tworzymy zmienną z, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla każdego elementu z zakresu 1 do n, podzielonego przez n.
z <- qnorm((1:n - 0.5) / n)
# Tworzymy zmienną y, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla funkcji rank dla elementów z sortowanej tablicy x, podzielonego przez n.
y <- qnorm((rank(x) - 0.5) / n)
# Tworzymy zmienną A2, która jest sumą dwóch logarytmów, skalowana i mnożona przez odpowiednie współczynniki.
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
# Tworzymy zmienną "p_value", która jest wartością funkcji pnorm, dla wartości A2 podniesionej do kwadratu i podzielonej przez pierwiastek z dwóch logarytmów, odejmując jedynkę.
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
# W następnym kroku, sprawdzamy czy wartość "p_value" jest mniejsza od 0.05.
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
cat("odrzucamy hipotezę o rozkładzie normalnym")
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
cat("nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym")
}
# Obliczyć estymator wartości oczekiwanej µ dla uzyskanej próby:
średnia_próby <- mean(sample_L)
# Obliczyć estymator wariancji σ^2 dla uzyskanej próby:
wariancja_próby <- var(sample_L)
# Określić liczbę stopni swobody dla próby:
stopnie_swobody <- sample_size - 1
# Wyznaczyć kwantyle z rozkładu t-Studenta z liczbą stopni swobody równą liczbie stopni swobody z kroku 3:
kwantyle <- qt(0.025, df=stopnie_swobody)
# Obliczyć górną i dolną granicę przedziału ufności dla wartości oczekiwanej µ:
górna_granica_μ <- średnia_próby + kwantyle * sqrt(wariancja_próby / sample_size)
dolna_granica_μ <- średnia_próby - kwantyle * sqrt(wariancja_próby / sample_size)
# Obliczyć górną i dolną granicę przedziału ufności dla wariancji σ^2:
górna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.975, df=stopnie_swobody)
dolna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.025, df=stopnie_swobody)
# Wynikiem jest przedział ufności dla wartości oczekiwanej µ: (dolna_granica_μ, górna_granica_μ) i dla wariancji σ^2: (dolna_granica_σ2, górna_granica_σ2).
# wnioski
set.seed(123)
n <- 10000
mu <- 1
sigma <- 2
L <- rnorm(n, mean = mu, sd = sigma)
hist(L, probability = TRUE, col = "gray", main = "Histogram of L")
x <- seq(min(L), max(L), length.out = 100)
y <- dnorm(x, mean = mu, sd = sigma)
lines(x, y, col = "red", lwd = 2)
# stawienie ziarna generatora liczb losowych na 123, co oznacza, że zawsze otrzymasz tę samą serię liczb losowych, kiedy użyjesz tego samego ziarna.
set.seed(123)
n <- 10000
# Tworzenie zmiennej mu, która jest ustawiona na wartość 1, co jest wartością średnią dla normalnego rozkładu
mu <- 1
# Tworzenie zmiennej sigma, która jest ustawiona na wartość 2, co jest odchyleniem standardowym dla normalnego rozkładu
sigma <- 2
# Wygenerowanie populacji L składającej się z n elementów, które są losowymi liczbami z normalnego rozkładu z wartością średnią mu i odchyleniem standardowym sigma.
L <- rnorm(n, mean = mu, sd = sigma)
# Rysowanie histogramu populacji L, z flagą probability = TRUE, co oznacza, że histogram jest wyświetlany jako gęstość, kolorem wypełnienia jest szary i tytułem wykresu jest "Histogram of L".
hist(L, probability = TRUE, col = "gray", main = "Histogram of L")
#  Tworzenie wektora x składającego się z 100 punktów od najmniejszej wartości w populacji L do największej wartości w populacji L.
x <- seq(min(L), max(L), length.out = 100)
# Obliczenie wartości funkcji gęstości normalnej z wartością średnią mu i odchyleniem standardowym sigma dla każdego punktu wektora x.
y <- dnorm(x, mean = mu, sd = sigma)
# Rysowanie linii łączącej punkty wektora x i y w k
lines(x, y, col = "red", lwd = 2)
sample_size <- 100
# wywołuje funkcję sample(), aby pobrać losowy podzbiór sample_size (100) wartości z wektora L. Indeksy tych wartości są zapisywane w zmiennej sample_index.
sample_index <- sample(1:length(L), size=sample_size, replace=TRUE)
# używam indeksów z sample_index do wybrania wartości z wektora L i przypisuje je do zmiennej sample_L.
sample_L <- L[sample_index]
# Wewnątrz funkcji ad_test, tworzymy zmienną n, która przechowuje długość wejściowej tablicy x.
ad_test <- function(x) {
n <- length(x)
# Sortujemy wejściową tablicę x.
x <- sort(x)
# Deklarowana jest zmienna epsilon (eps) z wartością 0.00001.
eps <- 0.00001
# Tworzymy zmienną z, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla każdego elementu z zakresu 1 do n, podzielonego przez n.
z <- qnorm((1:n - 0.5) / n)
# Tworzymy zmienną y, która jest wartością kwantyla normalnego, zwracaną przez funkcję qnorm dla funkcji rank dla elementów z sortowanej tablicy x, podzielonego przez n.
y <- qnorm((rank(x) - 0.5) / n)
# Tworzymy zmienną A2, która jest sumą dwóch logarytmów, skalowana i mnożona przez odpowiednie współczynniki.
A2 <- -n - (1/n) * sum((2 * (1:n) - 1) * log(abs(y) + eps) + (2 * (n:1) - 1) * log(abs(y - z) + eps))
# Tworzymy zmienną "p_value", która jest wartością funkcji pnorm, dla wartości A2 podniesionej do kwadratu i podzielonej przez pierwiastek z dwóch logarytmów, odejmując jedynkę.
p_value <- pnorm(sqrt(n) * (A2 / sqrt(2 * log(n)) - 1))
return(p_value)
}
p_value <- ad_test(sample_L)
# W następnym kroku, sprawdzamy czy wartość "p_value" jest mniejsza od 0.05.
if (p_value < 0.05) {
# odrzucamy hipotezę o rozkładzie normalnym
cat("odrzucamy hipotezę o rozkładzie normalnym")
} else {
# nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym
cat("nie ma podstaw do odrzucenia hipotezy o rozkładzie normalnym")
}
# Obliczyć estymator wartości oczekiwanej µ dla uzyskanej próby:
średnia_próby <- mean(sample_L)
# Obliczyć estymator wariancji σ^2 dla uzyskanej próby:
wariancja_próby <- var(sample_L)
# Określić liczbę stopni swobody dla próby:
stopnie_swobody <- sample_size - 1
# Wyznaczyć kwantyle z rozkładu t-Studenta z liczbą stopni swobody równą liczbie stopni swobody z kroku 3:
kwantyle <- qt(0.025, df=stopnie_swobody)
# Obliczyć górną i dolną granicę przedziału ufności dla wartości oczekiwanej µ:
górna_granica_μ <- średnia_próby + kwantyle * sqrt(wariancja_próby / sample_size)
dolna_granica_μ <- średnia_próby - kwantyle * sqrt(wariancja_próby / sample_size)
# Obliczyć górną i dolną granicę przedziału ufności dla wariancji σ^2:
górna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.975, df=stopnie_swobody)
dolna_granica_σ2 <- ((sample_size - 1) * wariancja_próby) / qchisq(0.025, df=stopnie_swobody)
# Wynikiem jest przedział ufności dla wartości oczekiwanej µ: (dolna_granica_μ, górna_granica_μ) i dla wariancji σ^2: (dolna_granica_σ2, górna_granica_σ2).
# wnioski
# Tworzyę populację "L" składającą się z 10000 losowych liczb z normalnego rozkładu o wartości średniej 1 i odchyleniu standardowym 2. Następnie tworzy histogram tej populacji i wyświetla ją jako gęstość z szarym kolorem wypełnienia. Następnie tworzy wektor "x" z 100 punktami i oblicza wartości funkcji gęstości normalnej dla każdego punktu wektora. Wreszcie, wyświetla linię łączącą punkty wektora "x" i "y" w czerwonym kolorze.
# Następnie testujemy hipoteże o rozkładzie normalnym dla próbki (subset) wektora "L". Najpierw, funkcja "sample" jest wywoływana, aby pobrać losowy podzbiór 100 wartości z wektora L. Indeksy tych wartości są zapisywane w zmiennej "sample_index". Następnie, te indeksy są używane do wybrania wartości z wektora L i przypisywania ich do zmiennej "sample_L". Funkcja "ad_test" jest następnie wywoływana dla "sample_L", a jej wynik (wartość "p_value") jest sprawdzany, aby określić, czy hipoteza o rozkładzie normalnym jest odrzucona, czy też nie. Jeśli wartość "p_value" jest mniejsza niż 0.05, hipoteza o rozkładzie normalnym jest odrzucona, w przeciwnym razie nie ma podstaw do jej odrzucenia.
# Na końcu wyznaczam estymatory wartości oczekiwanej (µ) i wariancji (σ^2) dla uzyskanej próby "sample_L". Wartość oczekiwana jest obliczana jako średnia arytmetyczna elementów w próbie (mean(sample_L)), a wariancja jako wariancja populacji (var(sample_L)).
# Następnie określana jest liczba stopni swobody (sample_size-1), które są używane do wyznaczenia kwantyli z rozkładu t-Studenta (qt(0.025, df=stopnie_swobody)).
# Ostatnie kroki polegają na obliczeniu górnej i dolnej granicy przedziału ufności dla wartości oczekiwanej (μ) i wariancji (σ^2). Wartość oczekiwana jest estymowana poprzez dodanie lub odejmowanie kwantyla t-Studenta od średniej arytmetycznej próby. Wartość wariancji jest estymowana poprzez obliczenie wartości (sample_size-1) * wariancja_próby) / kwantyla chi-kwadrat (qchisq(0.975, df=stopnie_swobody)).
